buildscript {
  dependencies {
    classpath 'com.android.tools.build:gradle-experimental:0.7.0'
  }
}

apply plugin: 'com.android.model.library'

model {
  android {
    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion

    defaultConfig {
      minSdkVersion.apiLevel = 4
      consumerProguardFiles.add(file('consumer-proguard-rules.pro'))
    }

    buildTypes {
      release {
        ndk {
          CFlags.addAll(['-Os', '-fomit-frame-pointer', '-DNDEBUG', '-fvisibility=hidden'])
          cppFlags.addAll(['-Os', '-fomit-frame-pointer', '-DNDEBUG', '-fvisibility=hidden'])
        }
      }
      debug {
        ndk {
          debuggable true
          CFlags.addAll(['-g'])
          cppFlags.addAll(['-g'])
        }
      }
    }

    ndk {
      moduleName = 'duktape'
      stl = "c++_static"
      toolchain = "clang"
      ldLibs.add("atomic")
      CFlags.addAll(['-std=c99', '-fstrict-aliasing', '-DDUK_OPT_HAVE_CUSTOM_H'])
      cppFlags.addAll(['-std=c++11', '-fstrict-aliasing', '-fexceptions', '-DDUK_OPT_HAVE_CUSTOM_H'])
    }
  }
  android.lintOptions {
    textReport = true
    textOutput('stdout')
  }
}

dependencies {
  compile 'com.android.support:support-annotations:23.3.0'
}

// TODO move all this nonsense to a standalone file
import com.android.build.gradle.managed.AndroidConfig
import com.android.build.gradle.model.AndroidComponentSpec

interface JavadocBinary extends BinarySpec {}
class DefaultJavadocBinary extends BaseBinarySpec implements JavadocBinary {}
interface SourcesBinary extends BinarySpec {}
class DefaultSourcesBinary extends BaseBinarySpec implements SourcesBinary {}

/** Creates source and javadoc jars per Maven Central requirements. Hold on to your butts... */
class MavenCentralArtifactRules extends RuleSource {
  @Mutate
  void createJavadocTask(ModelMap<Task> tasks, @Path('android') AndroidConfig android) {
    tasks.create('androidJavadocGenerate', Javadoc) {
      source = android.sources.main.java.source
    }
  }

  @Mutate
  void createJavadocJarTask(ModelMap<Task> tasks) {
    tasks.create('androidJavadocJar', Jar) {
      classifier = 'javadoc'
    }
  }

  @Mutate
  void configureJavadocJarTask(@Path('tasks.androidJavadocJar') Jar jar,
      @Path('tasks.androidJavadocGenerate') Javadoc javadoc) {
    jar.from javadoc.destinationDir
  }

  @Mutate
  void createSourceJarTask(ModelMap<Task> tasks,
      @Path('android') AndroidConfig android) {
    tasks.create('androidSourcesJar', Jar) {
      classifier = 'sources'
      from android.sources.main.java.source
    }
  }

  @BinaryType
  void defineJavadocBinaryType(BinaryTypeBuilder<JavadocBinary> builder) {
    builder.defaultImplementation(DefaultJavadocBinary.class);
  }

  @BinaryType
  void defineSourcesBinaryType(BinaryTypeBuilder<SourcesBinary> builder) {
    builder.defaultImplementation(DefaultSourcesBinary.class);
  }

  @ComponentBinaries
  void createJavadocBinary(ModelMap<JavadocBinary> binaries, AndroidComponentSpec spec) {
    binaries.create('javadoc')
  }

  @ComponentBinaries
  void createSourcesBinary(ModelMap<SourcesBinary> binaries, AndroidComponentSpec spec) {
    binaries.create('sources')
  }

  @Finalize
  void associateJavadocTaskWithBinary(ModelMap<JavadocBinary> binaries) {
    binaries.afterEach { it.buildTask.dependsOn 'androidJavadocJar' }
  }

  @Finalize
  void associateSourcesTaskWithBinary(ModelMap<SourcesBinary> binaries) {
    binaries.afterEach { it.buildTask.dependsOn 'androidSourcesJar' }
  }
}

apply plugin: MavenCentralArtifactRules
